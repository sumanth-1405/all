package com.stackroute.datamunger.reader;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.text.ParseException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;

import com.stackroute.datamunger.query.DataSet;
import com.stackroute.datamunger.query.DataTypeDefinitions;
import com.stackroute.datamunger.query.Filter;
import com.stackroute.datamunger.query.Header;
import com.stackroute.datamunger.query.Row;
import com.stackroute.datamunger.query.RowDataTypeDefinitions;
import com.stackroute.datamunger.query.parser.QueryParameter;
import com.stackroute.datamunger.query.parser.Restriction;

public class CsvQueryProcessor implements QueryProcessingEngine {

	BufferedReader br = null;
	Header headerObject = null;
	RowDataTypeDefinitions row = null;
	DataTypeDefinitions dt = null;
	DataSet last = null;
	Filter f = null;
	/*
	 * This method will take QueryParameter object as a parameter which contains the
	 * parsed query and will process and populate the ResultSet
	 */

	public DataSet getResultSet(QueryParameter queryParameter)
			throws IOException, NullPointerException, ParseException {
		headerObject = new Header();
		row = new RowDataTypeDefinitions();
		dt = new DataTypeDefinitions();
		last = new DataSet();
		Map<Long, Row> data = new LinkedHashMap<Long, Row>();
		boolean result = true;

		/*
		 * initialize BufferedReader to read from the file which is mentioned in
		 * QueryParameter. Consider Handling Exception related to file reading.
		 */

		br = new BufferedReader(new FileReader(queryParameter.getFileName()));

		/*
		 * read the first line which contains the header. Please note that the headers
		 * can contain spaces in between them. For eg: city, winner
		 */br.mark(1);
		String header = br.readLine();
		String[] headerElements = header.split(",");
		for (int i = 0; i < headerElements.length; i++) {
			headerElements[i] = headerElements[i].trim();
		}
		/*
		 * read the next line which contains the first row of data. We are reading this
		 * line so that we can determine the data types of all the fields. Please note
		 * that ipl.csv file contains null value in the last column. If you do not
		 * consider this while splitting, this might cause exceptions later
		 */
		String nextRow = br.readLine();
		nextRow += " ,";
		String[] nextRowElements = nextRow.split("\\s*,\\s*");
		/*
		 * populate the header Map object from the header array. header map is having
		 * data type <String,Integer> to contain the header and it's index.
		 */
		Map<String, Integer> headerMap = new HashMap<String, Integer>();
		for (int i = 0; i < headerElements.length; i++) {
			headerMap.put(headerElements[i], i);
		}
		headerObject.setHeaderMap(headerMap);
		/*
		 * We have read the first line of text already and kept it in an array. Now, we
		 * can populate the RowDataTypeDefinition Map object. RowDataTypeDefinition map
		 * is having data type <Integer,String> to contain the index of the field and
		 * it's data type. To find the dataType by the field value, we will use
		 * getDataType() method of DataTypeDefinitions class
		 */
		Map<Integer, String> rowMap = new HashMap<Integer, String>();
		for (int i = 0; i < nextRowElements.length; i++) {
			rowMap.put(i, (String) dt.getDataType(nextRowElements[i]));
		}
		row.setRow(rowMap);
		/*
		 * once we have the header and dataTypeDefinitions maps populated, we can start
		 * reading from the first line. We will read one line at a time, then check
		 * whether the field values satisfy the conditions mentioned in the query,if
		 * yes, then we will add it to the resultSet. Otherwise, we will continue to
		 * read the next line. We will continue this till we have read till the last
		 * line of the CSV file.
		 */

		/* reset the buffered reader so that it can start reading from the first line */

		br.reset();
		/*
		 * skip the first line as it is already read earlier which contained the header
		 */
		String Line = br.readLine();
		/* read one line at a time from the CSV file till we have any lines left */

		/*
		 * once we have read one line, we will split it into a String Array. This array
		 * will continue all the fields of the row. Please note that fields might
		 * contain spaces in between. Also, few fields might be empty.
		 */
		/*
		 * if there are where condition(s) in the query, test the row fields against
		 * those conditions to check whether the selected row satifies the conditions
		 */
		// if(queryParameter.getRestrictions()!=null) {

		/*
		 * from QueryParameter object, read one condition at a time and evaluate the
		 * same. For evaluating the conditions, we will use evaluateExpressions() method
		 * of Filter class. Please note that evaluation of expression will be done
		 * differently based on the data type of the field. In case the query is having
		 * multiple conditions, you need to evaluate the overall expression i.e. if we
		 * have OR operator between two conditions, then the row will be selected if any
		 * of the condition is satisfied. However, in case of AND operator, the row will
		 * be selected only if both of them are satisfied.
		 */
		long t = 0;
		boolean[] conditionsResult = null;
		String line = null;
		if (queryParameter.getRestrictions() != null) {
			conditionsResult = new boolean[queryParameter.getRestrictions().size()];
		}
		while ((line = br.readLine()) != null) {
			line += " ,";
			line = line.replaceAll(",,", ", ,");
			String[] lineArray = line.split(",");
			f = new Filter();
			if (queryParameter.getRestrictions() != null) {
				Iterator<Restriction> it = queryParameter.getRestrictions().iterator();
				int i = 0;
				while (it.hasNext()) {
					Restriction r = it.next();
					conditionsResult[i] = f.evaluateExpressions(lineArray, r, headerObject, row);
					i++;
				}
				/*
				 * check for multiple conditions in where clause for eg: where salary>20000 and
				 * city=Bangalore for eg: where salary>20000 or city=Bangalore and dept!=Sales
				 */
				if (queryParameter.getLogicalOperators() != null) {
					String[] logicalOps = new String[queryParameter.getLogicalOperators().size()];
					logicalOps = queryParameter.getLogicalOperators().toArray(logicalOps);
					result = conditionsResult[0];
					for (int k = 0, j = 1; k < logicalOps.length; k++, j++) {
						if (logicalOps[k].matches("and")) {
							result = result & conditionsResult[j];
						}
						if (logicalOps[k].matches("or"))
							result = result | conditionsResult[j];
						if (logicalOps[k].matches("not"))
							result = !result;
					}
				}
			}

			/*
			 * if the overall condition expression evaluates to true, then we need to check
			 * if all columns are to be selected(select *) or few columns are to be
			 * selected(select col1,col2). In either of the cases, we will have to populate
			 * the row map object. Row Map object is having type <String,String> to contain
			 * field Index and field value for the selected fields. Once the row object is
			 * populated, add it to DataSet Map Object. DataSet Map object is having type
			 * <Long,Row> to hold the rowId (to be manually generated by incrementing a Long
			 * variable) and it's corresponding Row Object.
			 */
			if (result) {
				Map<String, String> qualifiedRow = new HashMap<String, String>();
				int index = 0;
				String colomnName = "";
				String colomnValue = "";
				String[] fields = queryParameter.getFields().toArray(new String[0]);
				if (fields != null) {
					for (int j = 0; j < fields.length; j++) {
						colomnName = fields[j];
						Iterator<Map.Entry<String, Integer>> iter = headerObject.getHeaderMap().entrySet().iterator();
						while (iter.hasNext()) {
							Map.Entry<String, Integer> myEntry = iter.next();
							if (myEntry.getKey().matches(colomnName)) {
								index = myEntry.getValue();
								colomnValue = lineArray[index];
								qualifiedRow.put(colomnName, colomnValue);
							}
						}
					}
					Row push = new Row();
					push.setRowMap(qualifiedRow);
					data.put(t++, push);
				}

			}
			last.setData(data);
		} /* return data set object */
		return last;

	}
}